// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/litixsoft/lx-golib/db (interfaces: IDatabase)

// Package lxGoLibMocks is a generated GoMock package.
package lxGoLibMocks

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/litixsoft/lx-golib/db"
	reflect "reflect"
)

// MockIDatabase is a mock of IDatabase interface
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIDatabase) Create(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockIDatabaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDatabase)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockIDatabase) Delete(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDatabase)(nil).Delete), arg0)
}

// DeleteAll mocks base method
func (m *MockIDatabase) DeleteAll(arg0 interface{}) (db.ChangeInfo, error) {
	ret := m.ctrl.Call(m, "DeleteAll", arg0)
	ret0, _ := ret[0].(db.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockIDatabaseMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockIDatabase)(nil).DeleteAll), arg0)
}

// GetAll mocks base method
func (m *MockIDatabase) GetAll(arg0, arg1 interface{}, arg2 *db.Options) (int, error) {
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockIDatabaseMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIDatabase)(nil).GetAll), arg0, arg1, arg2)
}

// GetCount mocks base method
func (m *MockIDatabase) GetCount(arg0 interface{}) (int, error) {
	ret := m.ctrl.Call(m, "GetCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount
func (mr *MockIDatabaseMockRecorder) GetCount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIDatabase)(nil).GetCount), arg0)
}

// GetOne mocks base method
func (m *MockIDatabase) GetOne(arg0, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOne indicates an expected call of GetOne
func (mr *MockIDatabaseMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockIDatabase)(nil).GetOne), arg0, arg1)
}

// Update mocks base method
func (m *MockIDatabase) Update(arg0, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIDatabaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDatabase)(nil).Update), arg0, arg1)
}

// UpdateAll mocks base method
func (m *MockIDatabase) UpdateAll(arg0, arg1 interface{}) (db.ChangeInfo, error) {
	ret := m.ctrl.Call(m, "UpdateAll", arg0, arg1)
	ret0, _ := ret[0].(db.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll
func (mr *MockIDatabaseMockRecorder) UpdateAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockIDatabase)(nil).UpdateAll), arg0, arg1)
}
